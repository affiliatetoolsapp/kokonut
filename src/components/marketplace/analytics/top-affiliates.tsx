"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip, LineChart, Line } from "recharts"
import type { DateRange } from "react-day-picker"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"

// Sample data for top affiliates
const topAffiliatesByRevenue = [
  { name: "John Smith", value: 18900 },
  { name: "Sarah Johnson", value: 15600 },
  { name: "Michael Brown", value: 12400 },
  { name: "Emily Davis", value: 9800 },
  { name: "David Wilson", value: 7500 },
]

const affiliatePerformanceData = [
  {
    id: "AFF-5678",
    name: "John Smith",
    email: "john.smith@example.com",
    avatar: "/placeholder.svg?height=40&width=40",
    status: "active",
    clicks: 15240,
    conversions: 420,
    revenue: 18900,
    epc: "$1.24",
    convRate: "2.76%",
  },
  {
    id: "AFF-6789",
    name: "Sarah Johnson",
    email: "sarah.johnson@example.com",
    avatar: "/placeholder.svg?height=40&width=40",
    status: "active",
    clicks: 12600,
    conversions: 380,
    revenue: 15600,
    epc: "$1.24",
    convRate: "3.02%",
  },
  {
    id: "AFF-7890",
    name: "Michael Brown",
    email: "michael.brown@example.com",
    avatar: "/placeholder.svg?height=40&width=40",
    status: "active",
    clicks: 10100,
    conversions: 290,
    revenue: 12400,
    epc: "$1.23",
    convRate: "2.87%",
  },
  {
    id: "AFF-8901",
    name: "Emily Davis",
    email: "emily.davis@example.com",
    avatar: "/placeholder.svg?height=40&width=40",
    status: "active",
    clicks: 8300,
    conversions: 250,
    revenue: 9800,
    epc: "$1.18",
    convRate: "3.01%",
  },
  {
    id: "AFF-9012",
    name: "David Wilson",
    email: "david.wilson@example.com",
    avatar: "/placeholder.svg?height=40&width=40",
    status: "active",
    clicks: 6600,
    conversions: 180,
    revenue: 7500,
    epc: "$1.14",
    convRate: "2.73%",
  },
]

const affiliateGrowthData = [
  { month: "Jan", affiliates: 120 },
  { month: "Feb", affiliates: 150 },
  { month: "Mar", affiliates: 200 },
  { month: "Apr", affiliates: 280 },
  { month: "May", affiliates: 350 },
  { month: "Jun", affiliates: 410 },
  { month: "Jul", affiliates: 490 },
  { month: "Aug", affiliates: 550 },
  { month: "Sep", affiliates: 620 },
  { month: "Oct", affiliates: 680 },
  { month: "Nov", affiliates: 720 },
  { month: "Dec", affiliates: 780 },
]

interface TopAffiliatesProps {
  dateRange: DateRange
  filterType: string
}

export default function TopAffiliates({ dateRange, filterType }: TopAffiliatesProps) {
  // In a real app, we would filter the data based on dateRange and filterType

  return (
    <div className="grid grid-cols-1 gap-4">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>Top Affiliates by Revenue</CardTitle>
            <CardDescription>Revenue generated by top performing affiliates</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ChartContainer>
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={topAffiliatesByRevenue}
                    layout="vertical"
                    margin={{
                      top: 5,
                      right: 30,
                      left: 100,
                      bottom: 5,
                    }}
                  >
                    <CartesianGrid
                      strokeDasharray="3 3"
                      stroke="#374151"
                      opacity={0.1}
                      horizontal={true}
                      vertical={false}
                    />
                    <XAxis
                      type="number"
                      stroke="#6B7280"
                      fontSize={12}
                      tickLine={false}
                      axisLine={false}
                      tickFormatter={(value) => `$${value}`}
                    />
                    <YAxis
                      dataKey="name"
                      type="category"
                      stroke="#6B7280"
                      fontSize={12}
                      tickLine={false}
                      axisLine={false}
                    />
                    <Tooltip content={<CustomTooltip />} />
                    <Bar dataKey="value" fill="#8B5CF6" name="Revenue" radius={[0, 4, 4, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </ChartContainer>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Affiliate Growth</CardTitle>
            <CardDescription>Monthly growth in active affiliates</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ChartContainer>
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={affiliateGrowthData}
                    margin={{
                      top: 5,
                      right: 30,
                      left: 20,
                      bottom: 5,
                    }}
                  >
                    <CartesianGrid strokeDasharray="3 3" stroke="#374151" opacity={0.1} />
                    <XAxis dataKey="month" stroke="#6B7280" fontSize={12} tickLine={false} axisLine={false} />
                    <YAxis stroke="#6B7280" fontSize={12} tickLine={false} axisLine={false} />
                    <Tooltip content={<CustomTooltip />} />
                    <Line
                      type="monotone"
                      dataKey="affiliates"
                      stroke="#10B981"
                      strokeWidth={2}
                      dot={true}
                      activeDot={{ r: 6, fill: "#10B981" }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </ChartContainer>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Affiliate Performance Details</CardTitle>
          <CardDescription>Detailed performance metrics for top affiliates</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Affiliate</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Clicks</TableHead>
                  <TableHead>Conversions</TableHead>
                  <TableHead>Revenue</TableHead>
                  <TableHead>EPC</TableHead>
                  <TableHead>Conv. Rate</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {affiliatePerformanceData.map((affiliate) => (
                  <TableRow key={affiliate.id}>
                    <TableCell>
                      <div className="flex items-center gap-3">
                        <Avatar>
                          <AvatarImage src={affiliate.avatar} alt={affiliate.name} />
                          <AvatarFallback>{affiliate.name.charAt(0)}</AvatarFallback>
                        </Avatar>
                        <div>
                          <div className="font-medium">{affiliate.name}</div>
                          <div className="text-sm text-gray-500 dark:text-gray-400">{affiliate.email}</div>
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge
                        variant="outline"
                        className="bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300"
                      >
                        Active
                      </Badge>
                    </TableCell>
                    <TableCell>{affiliate.clicks.toLocaleString()}</TableCell>
                    <TableCell>{affiliate.conversions.toLocaleString()}</TableCell>
                    <TableCell>${affiliate.revenue.toLocaleString()}</TableCell>
                    <TableCell>{affiliate.epc}</TableCell>
                    <TableCell>{affiliate.convRate}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

function CustomTooltip({ active, payload, label }: any) {
  if (active && payload && payload.length) {
    return (
      <ChartTooltip>
        <ChartTooltipContent>
          {label && <p className="text-sm font-medium text-zinc-900 dark:text-zinc-100">{label}</p>}
          <div className="space-y-1">
            {payload.map((item: any, index: number) => (
              <div key={index} className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full" style={{ backgroundColor: item.color }} />
                <p className="text-xs text-zinc-600 dark:text-zinc-400">
                  {item.name}:{" "}
                  <span className="font-medium text-zinc-900 dark:text-zinc-100">
                    {item.name === "Revenue" ? `$${item.value}` : item.value}
                  </span>
                </p>
              </div>
            ))}
          </div>
        </ChartTooltipContent>
      </ChartTooltip>
    )
  }
  return null
}

